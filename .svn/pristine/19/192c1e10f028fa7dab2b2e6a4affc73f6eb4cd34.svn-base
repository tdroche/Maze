package edu.wm.cs.cs301.thomasroche.falstad;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Iterator;

import edu.wm.cs.cs301.thomasroche.falstad.Robot.Turn;

/**
 * Class handles the user interaction for the maze.
 * It implements a state-dependent behavior that controls the display and reacts to key board input from a user. 
 * After refactoring the original code from an applet into a panel, it is wrapped by a MazeApplication to be a java application 
 * and a MazeApp to be an applet for a web browser. At this point user keyboard input is first dealt with a key listener
 * and then handed over to a Maze object by way of the keyDown method.
 *
 * This code is refactored code from Maze.java by Paul Falstad, www.falstad.com, Copyright (C) 1998, all rights reserved
 * Paul Falstad granted permission to modify and use code for teaching purposes.
 * Refactored by Peter Kemper
 */
// MEMO: original code: public class Maze extends Applet {
// public class Maze extends Panel {
public class Maze implements Serializable {
	private static final long serialVersionUID = -3676898985364945444L;

	private void writeObject(ObjectOutputStream stream) throws IOException {
		stream.writeObject(views);
		stream.writeObject(wrapper);
		stream.writeInt(state);
		stream.writeInt(percentdone);
		stream.writeBoolean(showMaze);
		stream.writeBoolean(showSolution);
		stream.writeBoolean(solving);
		stream.writeBoolean(mapMode);
		stream.writeInt(viewx);
		stream.writeInt(viewy);
		stream.writeInt(angle);
		stream.writeInt(dx);
		stream.writeInt(dy);
		stream.writeInt(px);
		stream.writeInt(py);
		stream.writeInt(walkStep);
		stream.writeInt(viewdx);
		stream.writeInt(viewdy);
		stream.writeBoolean(deepdebug);
		stream.writeInt(mazew);
		stream.writeInt(mazeh);
		stream.writeObject(mazecells);
		stream.writeObject(mazedists);
		stream.writeObject(seencells);
		stream.writeObject(mapDrawer);
		stream.writeObject(firstPersonDrawer);
		stream.writeInt(method);
		stream.writeObject(rangeSet);
		stream.writeObject(robotDriver);
		stream.writeObject(basicRobot);
		stream.writeBoolean(newMazeComplete);
	}
	
	private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException{
		views = (ArrayList<Viewer>) stream.readObject();
		wrapper = (GraphicsWrapper) stream.readObject();
		state = stream.readInt();
		percentdone = stream.readInt();
		showMaze = stream.readBoolean();
		showSolution = stream.readBoolean();
		solving = stream.readBoolean();
		mapMode = stream.readBoolean();
		viewx = stream.readInt();
		viewy = stream.readInt();
		angle = stream.readInt();
		dx = stream.readInt();
		dy = stream.readInt();
		px = stream.readInt();
		py = stream.readInt();
		walkStep = stream.readInt();
		viewdx = stream.readInt();
		viewdy = stream.readInt();
		deepdebug = stream.readBoolean();
		mazew = stream.readInt();
		mazeh = stream.readInt();
		mazecells = (Cells) stream.readObject();
		mazedists = (Distance) stream.readObject();
		seencells = (Cells) stream.readObject();
		mapDrawer = (MapDrawer) stream.readObject();
		firstPersonDrawer = (FirstPersonDrawer) stream.readObject();
		method = stream.readInt();
		rangeSet = (RangeSet) stream.readObject();
		robotDriver = (RobotDriver) stream.readObject();
		basicRobot = (BasicRobot) stream.readObject();
		newMazeComplete = stream.readBoolean();
	}

	// Model View Controller pattern, the model needs to know the viewers.
	// However, all viewers share the same graphics to draw on, such that the share graphics
	// are administered by the Maze object.

	private ArrayList<Viewer> views = new ArrayList<Viewer>();
	private GraphicsWrapper wrapper; // graphics to draw on, shared by all views
	private int state; // keeps track of the current GUI state, one of STATE_TITLE,...,STATE_LOST,STATE_FINISH, mainly used in redraw()

	// possible values are defined in Constants
	// user can navigate 
	// title -> generating -(escape) -> title
	// title -> generation -> play -(escape)-> title
	// title -> generation -> play -> lost -> finish -> title
	// STATE_PLAY is the main state where the user can navigate through the maze in a first person view

	private int percentdone = 0; // describes progress during generation phase
	private boolean showMaze; // toggle switch to show overall maze on screen
	private boolean showSolution; // toggle switch to show solution in overall maze on screen
	private boolean solving; // toggle switch 
	private boolean mapMode; // true: display map of maze, false: do not display map of maze
	// map_mode is toggled by user keyboard input, causes a call to draw_map during play mode

	// static final int viewz = 50;    

	private int viewx;
	private int viewy;
	private int angle;

	private int dx; // current direction
	private int dy;
	private int px; // current position on maze grid (x,y)
	private int py;
	private int walkStep;
	private int viewdx; // current view direction
	private int viewdy;

	// debug stuff

	private boolean deepdebug = false;

	// properties of the current maze

	private int mazew; // width of maze
	private int mazeh; // height of maze
	private Cells mazecells; // maze as a matrix of cells which keep track of the location of walls
	private Distance mazedists; // a matrix with distance values for each cell towards the exit
	private Cells seencells; // a matrix with cells to memorize which cells are visible from the current point of view

	// the FirstPersonDrawer obtains this information and the MapDrawer uses it for highlighting currently visible walls on the map

	private MapDrawer mapDrawer;
	private FirstPersonDrawer firstPersonDrawer;

	// a segment is a continuous sequence of walls in vertical or horizontal direction
	// a subset of segments need to be quickly identified for drawing
	// the BSP tree partitions the set of all segments and provides a binary search tree for the partitions

	// Mazebuilder is used to calculate a new maze together with a solution
	// The maze is computed in a separate thread. It is started in the local Build method.
	// The calculation communicates back by calling the local newMaze() method.

	public MazeBuilder mazebuilder;

	// fixing a value matching the escape key

	private final int ESCAPE = 27;

	// generation method used to compute a maze

	private int method = 0; // 0: default method, Falstad's original code, 1: Prim's algorithm, 2: Eller's algorithm

	private RangeSet rangeSet;

	private String robotDriverSelection;
	private String skillSelection;
	private RobotDriver robotDriver;
	private BasicRobot basicRobot;

	private boolean newMazeComplete = false;

	/**
	 * Constructor
	 */

	public Maze() {
	}

	/**
	 * Constructor that also selects a particular generation method
	 */

	public Maze(int method) {
		if (1 == method)
			this.method = 1;
		else if (2 == method)
			this.method = 2;

		init();
	}

	// Getters

	public GraphicsWrapper getWrapper() {
		return wrapper;
	}

	public String getPercentDone(){
		return String.valueOf(percentdone);
	}

	public boolean isInShowMazeMode() { 
		return showMaze; 
	}

	public boolean isInShowSolutionMode() { 
		return showSolution; 
	}

	public boolean isInMapMode() { 
		return mapMode; 
	}

	public int getAngle() {
		return angle;
	}

	public int getDx() {
		return dx;
	}
	
	public int getDy() {
		return dy;
	}
	
	public int getPy() {
		return py;
	}

	public int getPx() {
		return px;
	}

	public int getWalkStep() {
		return walkStep;
	}

	public int getViewDx() {
		return viewdx;
	}

	public int getViewDy() {
		return viewdy;
	}

	public int getMazew() {
		return mazew;
	}
	
	public int getMazeh() {
		return mazeh;
	}

	public Cells getMazecells() {
		return mazecells;
	}

	public Distance getMazedists() {
		return mazedists;
	}

	public MapDrawer getMapDrawer() {
		return mapDrawer;
	}

	public FirstPersonDrawer getFirstPersonDrawer() {
		return firstPersonDrawer;
	}

	public int getMethod() {
		return method;
	}

	public RangeSet getRangeSet() {
		return rangeSet;
	}

	public RobotDriver getRobotDriver() {
		return robotDriver;
	}

	public String getSkillSelection() {
		return skillSelection;
	}

	public BasicRobot getBasicRobot() {
		return basicRobot;
	}

	public boolean getNewMazeComplete() {
		return newMazeComplete;
	}

	// Setters


	public void setGraphicsWrapper(GraphicsWrapper wrapper) {
		this.wrapper = wrapper;
	}

	public void setShowMaze(boolean showMaze) {
		this.showMaze = showMaze;
	}

	public void setShowSolution(boolean showSolution) {
		this.showSolution = showSolution;
	}

	public void setSolving(boolean solving) {
		this.solving = solving;
	}

	public void setMapMode(boolean mapMode) { 
		this.mapMode = mapMode; 
	}

	public void setDx(int dx) {
		this.dx = dx;
	}

	public void setDy(int dy) {
		this.dy = dy;
	}

	public void setPy(int py) {
		this.py = py;
	}

	public void setPx(int px) {
		this.px = px;
	}

	public void setMazew(int mazew) {
		this.mazew = mazew;
	}	

	public void setMazeh(int mazeh) {
		this.mazeh = mazeh;
	}

	public void setMazecells(Cells mazecells) {
		this.mazecells = mazecells;
	}

	public void setMazedists(Distance mazedists) {
		this.mazedists = mazedists;
	}

	public void setMapDrawer(MapDrawer mapDrawer) {
		this.mapDrawer = mapDrawer;
	}

	public void setFirstPersonDrawer(FirstPersonDrawer firstPersonDrawer) {
		this.firstPersonDrawer = firstPersonDrawer;
	}

	public void setMethod(int method) {
		this.method = method;
	}

	public void setRobotDriverSelection(String robotDriverSelection) {
		this.robotDriverSelection = robotDriverSelection;
	}

	public void setSkillSelection(String skillSelection) {
		this.skillSelection = skillSelection;
	}

	public void setRobotDriver(RobotDriver robotDriver) {
		this.robotDriver = robotDriver;
	}

	public void setBasicRobot(BasicRobot basicRobot) {
		this.basicRobot = basicRobot;
	}

	protected void setCurrentPosition(int x, int y) {
		px = x;
		py = y;
	}

	protected void setCurrentDirection(int x, int y) {
		dx = x;
		dy = y;
	}

	/**
	 * Method to initialize internal attributes. Called separately from the constructor. 
	 */
	public void init() {
		rangeSet = new RangeSet();
	}

	/**
	 * Method obtains a new Mazebuilder and has it compute new maze, 
	 * it is only used in keyDown()
	 * 
	 * @param skill level determines the width, height and number of rooms for the new maze
	 */

	public void build(int skill) {
		// switch screen

		// state = Constants.STATE_GENERATING;
		// percentdone = 0;
		// notifyViewerRedraw();

		// select generation method
		switch (method) {
		case 2: mazebuilder = new MazeBuilderEller(); // generate with Eller's algorithm
		break;
		case 1: mazebuilder = new MazeBuilderPrim(); // generate with Prim's algorithm
		break;
		case 0: // generate with Falstad's original algorithm (0 and default), note the missing break statement
		default: mazebuilder = new MazeBuilder(); 
		break;
		}
		// adjust settings and launch generation in a separate thread
		mazew = Constants.SKILL_X[skill];
		mazeh = Constants.SKILL_Y[skill];
		mazebuilder.build(this, mazew, mazeh, Constants.SKILL_ROOMS[skill], Constants.SKILL_PARTCT[skill]);
		// mazebuilder performs in a separate thread and calls back by calling newMaze() to return newly generated maze
	}
	
	/**
	 * Call back method for MazeBuilder to communicate newly generated maze as reaction to a call to build()
	 * @param root node for traversals, used for the first person perspective
	 * @param cells encodes the maze with its walls and border
	 * @param dists encodes the solution by providing distances to the exit for each position in the maze
	 * @param startx current position, x coordinate
	 * @param starty current position, y coordinate
	 */
	public void newMaze(BSPNode root, Cells c, Distance dists, int startx, int starty) {
		if (Cells.deepdebugWall)
		{   // for debugging: dump the sequence of all deleted walls to a log file
			// This reveals how the maze was generated
			c.saveLogFile(Cells.deepedebugWallFileName);
		}
		// adjust internal state of maze model
		showMaze = showSolution = solving = false;
		mazecells = c;
		mazedists = dists;
		seencells = new Cells(mazew+1,mazeh+1);
		setCurrentDirection(1, 0);
		setCurrentPosition(startx,starty);
		walkStep = 0;
		viewdx = dx<<16; 
		viewdy = dy<<16;
		angle = 0;
		mapMode = false;
		// set the current state for the state-dependent behavior

		// state = Constants.STATE_PLAY;

		// createRobot();
		// cleanViews();

		// register views for the new maze
		// mazew and mazeh have been set in build() method before mazebuider was called to generate a new maze.
		// reset map_scale in mapdrawer to a value of 10

		addView(new FirstPersonDrawer(600, 600, Constants.MAP_UNIT, Constants.STEP_SIZE,
				mazecells, seencells, 10, mazedists.getDists(), mazew, mazeh, root, this));
		addView(new MapDrawer(600, 600, Constants.MAP_UNIT, Constants.STEP_SIZE, mazecells,
				seencells, 10, mazedists.getDists(), mazew, mazeh, this));

		//setFirstPersonDrawer(new FirstPersonDrawer(Constants.VIEW_WIDTH, Constants.VIEW_HEIGHT, Constants.MAP_UNIT,
		//						Constants.STEP_SIZE, mazecells, seencells, 10, mazedists.getDists(), mazew, mazeh, root, this));
		//setMapDrawer(new MapDrawer(Constants.VIEW_WIDTH, Constants.VIEW_HEIGHT, Constants.MAP_UNIT, Constants.STEP_SIZE, mazecells,
		//						seencells, 10, mazedists.getDists(), mazew, mazeh, this));

		// notify viewers

		// notifyViewerRedraw();
		//
		//if ((robotDriverSelection != null) && !robotDriverSelection.equals("Manual Driver")) {
		//	try {
		//		if (robotDriver.drive2Exit()) {
		//			state = Constants.STATE_FINISH;
		//			notifyViewerRedraw();
		//		}
		//	}
		//	catch (ArrayIndexOutOfBoundsException aioobe) {
		//		state = Constants.STATE_LOST;
		//		// wrapper.createRestartPanel();
		//		notifyViewerRedraw();
		//	}
		//	catch (Exception e) {
		//		state = Constants.STATE_LOST;
		//		// wrapper.createRestartPanel();
		//		notifyViewerRedraw();
		//	}
		//}

		newMazeComplete = true;
	}
	
	public void createRobot() {
		if (robotDriverSelection == null) {
			basicRobot = new BasicRobot(this);
		}
		else if (robotDriverSelection.equals("Manual Driver")) {
			basicRobot = new BasicRobot(this);
			robotDriver = new ManualDriver();
		}
		else if (robotDriverSelection.equals("Curious Mouse")) {
			basicRobot = new BasicRobot(this, true, true, true, true);
			robotDriver = new CuriousMouse();
		}
		else if (robotDriverSelection.equals("Wall Follower")) {
			basicRobot = new BasicRobot(this, true, false, true, false);
			robotDriver = new WallFollower();
		}
		else if (robotDriverSelection.equals("Wizard")) {
			basicRobot = new BasicRobot(this);
			robotDriver = new Wizard(this.mazedists);
		}
		else {
			basicRobot = new BasicRobot(this);
		}

		if (robotDriver != null)
			robotDriver.setRobot(basicRobot);
	}

	/////////////////////////////// Methods for the Model-View-Controller Pattern /////////////////////////////

	/**
	 * Register a view
	 */
	public void addView(Viewer view) {
		views.add(view);
	}

	/**
	 * Unregister a view
	 */
	public void removeView(Viewer view) {
		views.remove(view);
	}

	/**
	 * Remove obsolete FirstPersonDrawer and MapDrawer
	 */
	private void cleanViews() {
		// go through views and notify each one
		Iterator<Viewer> it = views.iterator();
		while (it.hasNext())
		{
			Viewer v = it.next();
			if ((v instanceof FirstPersonDrawer)||(v instanceof MapDrawer))
			{
				//System.out.println("Removing " + v);
				it.remove();
			}
		}

	}

	/**
	 * Notify all registered viewers to redraw their graphics.
	 * 
	 * NOTE: change to protected to allow test cases to run and not have to handle graphics.
	 */
	public void notifyViewerRedraw() {
		// go through views and notify each one
		Iterator<Viewer> it = views.iterator();
		while (it.hasNext())
		{
			Viewer v = it.next();
			// viewers draw on the buffer graphics
			v.redraw(wrapper, state, px, py, viewdx, viewdy, walkStep, Constants.VIEW_OFFSET, rangeSet, angle);
		}
		// update the screen with the buffer graphics
		// wrapper.update();
	}

	/** 
	 * Notify all registered viewers to increment the map scale
	 */
	private void notifyViewerIncrementMapScale() {
		// go through views and notify each one
		Iterator<Viewer> it = views.iterator();
		while (it.hasNext())
		{
			Viewer v = it.next();
			v.incrementMapScale();
		}
		// update the screen with the buffer graphics
		// wrapper.update();
	}

	/** 
	 * Notify all registered viewers to decrement the map scale
	 */
	private void notifyViewerDecrementMapScale() {
		// go through views and notify each one
		Iterator<Viewer> it = views.iterator();
		while (it.hasNext())
		{
			Viewer v = it.next();
			v.decrementMapScale();
		}
		// update the screen with the buffer graphics
		// wrapper.update();
	}

	void buildInterrupted() {
		state = Constants.STATE_TITLE;
		notifyViewerRedraw();
		mazebuilder = null;
	}

	final double radify(int x) {
		return x*Math.PI/180;
	}

	/**
	 * Allows external increase to percentage in generating mode with subsequence graphics update
	 * @param pc gives the new percentage on a range [0,100]
	 * @return true if percentage was updated, false otherwise
	 */
	public boolean increasePercentage(int pc) {
		if (percentdone < pc && pc < 100) {
			percentdone = pc;
			if (state == Constants.STATE_GENERATING)
			{
				notifyViewerRedraw();
			}
			else
				dbg("Warning: Receiving update request for increasePercentage while not in generating state, skip redraw.");
			return true;
		}
		return false;
	}

	private void dbg(String str) {
		// System.out.println(str);
	}

	private void logPosition() {
		if (!deepdebug)
			return;
		dbg("x="+viewx/Constants.MAP_UNIT+" ("+
				viewx+") y="+viewy/Constants.MAP_UNIT+" ("+viewy+") ang="+
				angle+" dx="+dx+" dy="+dy+" "+viewdx+" "+viewdy);
	}

	/**
	 * Helper method for walk()
	 * @param dir
	 * @return true if there is no wall in this direction
	 */
	private boolean checkMove(int dir) {
		// obtain appropriate index for direction (CW_BOT, CW_TOP ...) 
		// for given direction parameter
		int a = angle/90;
		if (dir == -1)
			a = (a+2) & 3; // TODO: check why this works
		// check if cell has walls in this direction
		// returns true if there are no walls in this direction
		return mazecells.hasMaskedBitsFalse(px, py, Constants.MASKS[a]);
	}

	private void rotateStep() {
		angle = (angle+1800) % 360;
		viewdx = (int) (Math.cos(radify(angle))*(1<<16));
		viewdy = (int) (Math.sin(radify(angle))*(1<<16));
		moveStep();
	}

	@SuppressWarnings("static-access")
	private void moveStep() {
		notifyViewerRedraw();
		StateHolder.wrapper.postInvalidate();
		try {
			Thread.currentThread().sleep(25);
		} catch (Exception e) { }
	}

	private void rotateFinish() {
		setCurrentDirection((int) Math.cos(radify(angle)), (int) Math.sin(radify(angle)));
		logPosition();
	}

	private void walkFinish(int dir) {
		setCurrentPosition(px + dir*dx, py + dir*dy);
		
		if (isEndPosition(px,py)) {
			//state = Constants.STATE_FINISH;
			//notifyViewerRedraw();
		}
		walkStep = 0;
		logPosition();
	}

	/**
	 * checks if the given position is outside the maze
	 * @param x
	 * @param y
	 * @return true if position is outside, false otherwise
	 */
	private boolean isEndPosition(int x, int y) {
		return x < 0 || y < 0 || x >= mazew || y >= mazeh;
	}

	synchronized public void walk(int dir) {
		if (!checkMove(dir))
			return;
		for (int step = 0; step != 4; step++) {
			walkStep += dir;
			moveStep();
		}
		walkFinish(dir);
	}

	synchronized public void rotate(int dir) {
		final int originalAngle = angle;
		final int steps = 4;

		for (int i = 0; i != steps; i++) {
			angle = originalAngle + dir*(90*(i+1))/steps;
			rotateStep();
		}
		rotateFinish();
	}

	/**
	 * Method incorporates all reactions to keyboard input in original code, 
	 * after refactoring, Java Applet and Java Application wrapper call this method to communicate input.
	 */
	
	/*
	public boolean keyDown(int key) {
		// possible inputs for key: unicode char value, 0-9, A-Z, Escape, 'k','j','h','l'
		switch (state) {
		// if screen shows title page, keys describe level of expertise
		// create a maze according to the user's selected level
		case Constants.STATE_TITLE:
			if (key >= '0' && key <= '9') {
				build(key - '0');
				break;
			}
			if (key >= 'a' && key <= 'f') {
				build(key - 'a' + 10);
				break;
			}
			break;
		// if we are currently generating a maze, recognize interrupt signal (ESCAPE key)
		// to stop generation of current maze
		case Constants.STATE_GENERATING:
			if (key == ESCAPE) {
				mazebuilder.interrupt();
				buildInterrupted();
			}
			break;
		// if user explores maze, 
		// react to input for directions and interrupt signal (ESCAPE key)	
		// react to input for displaying a map of the current path or of the overall maze (on/off toggle switch)
		// react to input to display solution (on/off toggle switch)
		// react to input to increase/reduce map scale
		case Constants.STATE_PLAY:
			switch (key) {
			//case Event.UP:
			case 'k': case '8':
				try {
					if (robotDriver.drive2Exit()) {
						state = Constants.STATE_FINISH;
						// wrapper.createEndPanel();
						notifyViewerRedraw();
						break;
					}
				}
				catch (RobotStoppedException rse) {
					state = Constants.STATE_LOST;
					// wrapper.createRestartPanel();
					notifyViewerRedraw();
				}
				catch (HitObstacleException hoe) {
					state = Constants.STATE_LOST;
					// wrapper.createRestartPanel();
					notifyViewerRedraw();
				}
				catch (RobotOutOfEnergyException rooee) {
					state = Constants.STATE_LOST;
					//wrapper.createRestartPanel();
					notifyViewerRedraw();
				}

				try {
					basicRobot.move(1);
				}
				catch (HitObstacleException hoe) {
					state = Constants.STATE_LOST;
					// wrapper.createRestartPanel();
					notifyViewerRedraw();
				}
//				walk(1);
				break;
			//case Event.LEFT:
			case 'h': case '4':
				try{ 
					if (robotDriver.drive2Exit()) {
						state = Constants.STATE_FINISH;
						// wrapper.createEndPanel();
						notifyViewerRedraw();
						break;
					}
				}
				catch (RobotStoppedException rse) {
					state = Constants.STATE_LOST;
					// wrapper.createRestartPanel();
					notifyViewerRedraw();
				}
				catch (HitObstacleException hoe) {
					state = Constants.STATE_LOST;
					// wrapper.createRestartPanel();
					notifyViewerRedraw();
				}
				catch (RobotOutOfEnergyException rooee) {
					state = Constants.STATE_LOST;
					// wrapper.createRestartPanel();
					notifyViewerRedraw();
				}

				try {
					basicRobot.rotate(Turn.LEFT);
				}
				catch (RobotOutOfEnergyException rooe) {
					state = Constants.STATE_LOST;
					// wrapper.createRestartPanel();
					notifyViewerRedraw();
				}
//				rotate(1);
				break;
			//case Event.RIGHT:
			case 'l': case '6':
				try{ 
					if (robotDriver.drive2Exit()) {
						state = Constants.STATE_FINISH;
						// wrapper.createEndPanel();
						notifyViewerRedraw();
						break;
					}
				}
				catch (RobotStoppedException rse) {
					state = Constants.STATE_LOST;
					// wrapper.createRestartPanel();
					notifyViewerRedraw();
				}
				catch (HitObstacleException hoe) {
					state = Constants.STATE_LOST;
					// wrapper.createRestartPanel();
					notifyViewerRedraw();
				}
				catch (RobotOutOfEnergyException rooee) {
					state = Constants.STATE_LOST;
					// wrapper.createRestartPanel();
					notifyViewerRedraw();
				}

				try {
					basicRobot.rotate(Turn.RIGHT);
				}
				catch (RobotOutOfEnergyException rooe) {
					state = Constants.STATE_LOST;
					// wrapper.createRestartPanel();
					notifyViewerRedraw();
				}
//				rotate(-1);
				break;
			//case Event.DOWN:
			case 'j': case '2':
				try{ 
					if (robotDriver.drive2Exit()) {
						state = Constants.STATE_FINISH;
						// wrapper.createEndPanel();
						notifyViewerRedraw();
						break;
					}
				}
				catch (RobotStoppedException rse) {
					state = Constants.STATE_LOST;
					// wrapper.createRestartPanel();
					notifyViewerRedraw();
				}
				catch (HitObstacleException hoe) {
					state = Constants.STATE_LOST;
					// wrapper.createRestartPanel();
					notifyViewerRedraw();
				}
				catch (RobotOutOfEnergyException rooee) {
					state = Constants.STATE_LOST;
					// wrapper.createRestartPanel();
					notifyViewerRedraw();
				}

				try {
					basicRobot.rotate(Turn.AROUND);
				}
				catch (RobotOutOfEnergyException rooe) {
					state = Constants.STATE_LOST;
					// wrapper.createRestartPanel();
					notifyViewerRedraw();
				}
//				walk(-1);
				break;
			case ESCAPE: case 65385:
				if (solving)
					solving = false;
				else
					state = Constants.STATE_TITLE;
				notifyViewerRedraw();
				break;
			case ('w' & 0x1f): 
			{ 
				setCurrentPosition(px + dx, py + dy);
				notifyViewerRedraw();
				break;
			}
			case '\t': case 'm':
				mapMode = !mapMode; 		
				notifyViewerRedraw(); 
				break;
			case 'z':
				showMaze = !showMaze; 		
				notifyViewerRedraw(); 
				break;
			case 's':
				showSolution = !showSolution; 		
				notifyViewerRedraw();
				break;
			case ('s' & 0x1f):
				if (solving)
					solving = false;
				else {
					solving = true;
				}
			break;
			case '+': case '=':
			{
				notifyViewerIncrementMapScale();
				notifyViewerRedraw(); // seems useless but it is necessary to make the screen update
				break;
			}
			case '-':
				notifyViewerDecrementMapScale();
				notifyViewerRedraw(); // seems useless but it is necessary to make the screen update
				break;
			}
			break;
		// if we are finished, return to initial state with title screen	
		case Constants.STATE_FINISH:
		case Constants.STATE_LOST:
			state = Constants.STATE_TITLE;
			// wrapper.createRestartPanel();
			notifyViewerRedraw();
			break;
		}
		return true;
	}
	*/
}
